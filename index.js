// Generated by LiveScript 1.2.0
var ctrl;
angular.module('main', ['firebase']).directive('contenteditable', function(){
  return {
    require: 'ngModel',
    scope: {
      ngModel: '='
    },
    link: function(scope, e, attrs, ctrl){
      e.on('keyup', function(){
        return scope.$apply(function(){
          return scope.ngModel = e.html();
        });
      });
      return scope.$watch('ngModel', function(){
        return e.html(scope.ngModel);
      });
    }
  };
}).directive('chooser', function(DataService, $timeout){
  return {
    require: 'ngModel',
    scope: {
      ngModel: '='
    },
    restrict: 'E',
    replace: false,
    template: "<input ng-model='keyword'/>" + "<div ng-repeat='g in result' class='group'>" + "<div ng-repeat='i in g.list' class='item' ng-click='choose(g,i)'>" + "<div class='type'>{{i.type}}</div><div class='name'>{{g.name}}</div>" + "</div></div>",
    transclude: true,
    link: function(scope, e, attrs, ctrl){
      var search;
      scope.data = DataService.name.ref;
      scope.ngModel = {};
      scope.choose = function(g, i){
        var ref$;
        return ref$ = scope.ngModel, ref$.t = i.type, ref$.id = i.id, ref$.v = DataService[i.type].ref[i.id], ref$;
      };
      search = function(){
        var k;
        scope.result = !scope.keyword
          ? []
          : (function(){
            var results$ = [];
            for (k in scope.data.n) {
              results$.push(k);
            }
            return results$;
          }()).filter(function(it){
            return it.indexOf(scope.keyword) >= 0;
          }).map(function(it){
            DataService.name.prune(it);
            return {
              name: it,
              list: scope.data.n[it]
            };
          });
        return scope.handle = null;
      };
      return scope.$watch("keyword", function(v){
        if (scope.handle) {
          $timeout.cancel(scope.handle);
        }
        return scope.handle = $timeout(search, 350);
      });
    }
  };
}).filter('type', function(){
  return function(d, type){
    return (d || []).filter(function(it){
      return it.t === type;
    });
  };
}).filter('value', function(DataService){
  return function(d){
    return d.map(function(it){
      return it.v = DataService[it.t].ref[it.id], it;
    });
  };
}).filter('picked', function(DataService){
  return function(d, p, picked){
    var stand, ref$, key$;
    d == null && (d = []);
    picked == null && (picked = true);
    stand = (ref$ = p.stand || (p.stand = {}))[key$ = (DataService.user || {}).id] || (ref$[key$] = []);
    return d.filter(function(it){
      var ref$, ref1$;
      return !(ref$ = !picked) !== !(ref1$ = in$(it.id, stand)) && (ref$ || ref1$);
    }).sort(function(a, b){
      return stand.indexOf(a) - stand.indexOf(b);
    });
  };
}).factory('DataService', function($firebase){
  var ret, base;
  ret = {};
  ret.user = null;
  ret.dbRef = new Firebase('https://don.firebaseio.com');
  ret.firebase = $firebase(ret.dbRef);
  ret.auth = new FirebaseSimpleLogin(ret.dbRef, function(e, u){
    var i$, ref$, len$, f, results$ = [];
    ret.user = u;
    for (i$ = 0, len$ = (ref$ = ret.handle['user.changed']).length; i$ < len$; ++i$) {
      f = ref$[i$];
      results$.push(f(u));
    }
    return results$;
  });
  ret.handle = {};
  ret.on = function(n, f){
    var ref$;
    return ((ref$ = ret.handle)[n] || (ref$[n] = [])).push(f);
  };
  ret.link = function(cat, a, b, dir, name){
    var ls, lk;
    name == null && (name = null);
    ls = [a, b].map(function(it){
      var ref$, ref1$;
      return (ref$ = (ref1$ = it.v).link || (ref1$.link = {}))[cat] || (ref$[cat] = []);
    });
    lk = [b, a].map(function(it){
      var ref$, ref1$;
      return ref$ = (ref1$ = {}, ref1$.id = it.id, ref1$.t = it.t, ref1$), ref$.d = -dir * (2 * arguments[1] - 1), ref$.n = name, ref$;
    });
    ls.map(function(n, i){
      if (['t', 'id', 'd', 'n'].map(function(it){
        return n[it] === lk[i][it];
      }).filter(function(it){
        return !it;
      }).length > 0) {
        return n.push(lk[i]);
      }
    });
    [a, b].map(function(it, i){
      var ref$;
      if (!ret[it.t].ref[it.id]) {
        return ret[it.t].ref[it.id] = it.v;
      } else {
        return ((ref$ = ret[it.t].ref[it.id]).link || (ref$.link = {}))[cat] = ls[i];
      }
    });
    return [a, b].map(function(it){
      return ret[it.t].ref.$save();
    });
  };
  ret.name = {
    ref: $firebase(new Firebase('https://don.firebaseio.com/name')),
    add: function(n, type, id, field){
      var ref$, ref1$;
      if (((ref$ = (ref1$ = this.ref).n || (ref1$.n = {}))[n] || (ref$[n] = [])).filter(function(it){
        return it.type === type && it.id === id;
      }).length) {
        return;
      }
      ((ref$ = this.ref.n)[n] || (ref$[n] = [])).push({
        type: type,
        id: id,
        field: field
      });
      if (!(type in ((ref$ = this.ref).t || (ref$.t = {})))) {
        this.ref.t[type] = 1;
      }
      return this.ref.$save();
    },
    prune: function(n){
      var ref$;
      this.ref.n[n] = ((ref$ = this.ref.n)[n] || (ref$[n] = [])).map(function(it){
        var e;
        try {
          if (ret[it.type].ref[it.id][it.field] !== n) {
            throw 'changed';
          }
        } catch (e$) {
          e = e$;
          it.id = null;
        }
        return it;
      }).filter(function(it){
        return it && it.id;
      });
      return this.ref.$save();
    }
  };
  base = function(name){
    return {
      ref: $firebase(new Firebase("https://don.firebaseio.com/" + name)),
      create: function(it){
        var n, ref$, ref1$;
        n = this.ref.$add((it.creator = (ref1$ = {}, ref1$.id = (ref$ = ret.user).id, ref1$.username = ref$.username, ref1$), it.create_time = new Date().getTime(), it), {
          edit_time: new Date().getTime()
        });
        it.id = n.name();
        ret.name.add(it.name, name, n.name(), 'name');
        return it;
      },
      factory: function(){
        return {};
      }
    };
  };
  ret.user = base('user');
  ret.group = base('group');
  ret.proposal = base('proposal');
  ret.plan = base('plan');
  ret.comment = base('comment');
  ret.vision = base('vision');
  ret.issue = base('issue');
  return ret;
});
ctrl = {};
ctrl.main = function($scope, DataService){
  return DataService.on('user.changed', function(u){
    return $scope.$apply(function(){
      return $scope.user = u;
    });
  });
};
ctrl.user = function($scope, DataService){
  import$($scope, ctrl.base($scope, DataService, 'user'));
  $scope.login = function(){
    return DataService.auth.login('facebook');
  };
  $scope.logout = function(){
    return DataService.auth.logout('facebook');
  };
  return DataService.on('user.changed', function(u){
    return $scope.$apply(function(){
      return $scope.cur = u;
    });
  });
};
ctrl.name = function($scope, $timeout, DataService){
  var search;
  $scope.data = DataService.name.ref;
  $scope.handle = null;
  $scope.keyword = "";
  search = function(){
    var k;
    $scope.result = (function(){
      var results$ = [];
      for (k in $scope.data.n) {
        results$.push(k);
      }
      return results$;
    }()).filter(function(it){
      return it.indexOf($scope.keyword) >= 0;
    }).map(function(it){
      DataService.name.prune(it);
      return {
        name: it,
        list: $scope.data.n[it]
      };
    });
    return $scope.handle = null;
  };
  return $scope.$watch("keyword", function(){
    if ($scope.handle) {
      $timeout.cancel($scope.handle);
    }
    return $scope.handle = $timeout(search, 500);
  });
};
ctrl.base = function($scope, DS, ctrlName){
  return {
    create: function(t, k, p){
      var ret;
      ret = DS[ctrlName].create($scope.cur);
      $scope.cur = DS[ctrlName].factory();
      return ret;
    },
    createWith: function(cat, type, id, ref){
      var item;
      item = $scope.create();
      DS.link(cat, {
        id: id,
        t: type,
        v: ref
      }, {
        t: ctrlName,
        id: item.id,
        v: item
      }, 1);
      return item;
    },
    link: function(cat, a, type, id, ref, dir){
      dir == null && (dir = 1);
      return DS.link(cat, {
        id: a,
        t: ctrlName,
        v: this.get(ctrlName, a)
      }, {
        t: type,
        id: id,
        v: ref
      }, dir);
    },
    'delete': function(key){
      var ref$, types, cat, links, i$, len$, des, obj, ret, it, results$ = [];
      if ((!DS.user && DS[ctrlName].ref[key].creator) || (DS.user && DS.user.id !== ((ref$ = DS[ctrlName].ref[key]).creator || (ref$.creator = {})).id)) {
        return;
      }
      types = {};
      for (cat in ref$ = DS[ctrlName].ref[key].link) {
        links = ref$[cat];
        for (i$ = 0, len$ = links.length; i$ < len$; ++i$) {
          des = links[i$];
          obj = this.get(des.t, des.id);
          ret = obj.link[cat].map(fn$).filter(fn1$);
          if (ret.length !== obj.link[cat]) {
            obj.link[cat] = ret;
            types[des.t] = 1;
          }
        }
      }
      DS[ctrlName].ref.$remove(key);
      for (it in types) {
        if (it !== ctrlName) {
          results$.push(DS[it].ref.$save());
        }
      }
      return results$;
      function fn$(d, i){
        if (d.id === key) {
          return null;
        } else {
          return d;
        }
      }
      function fn1$(it){
        return it;
      }
    },
    get: function(type, id){
      return DS[type].ref[id] || {};
    },
    vote: function(p, d){
      var id, that, ref$, it;
      id = (that = DS.user) ? that.id : 0;
      if (!((ref$ = p.config || (p.config = {})).vote || (ref$.vote = {})).allowAnonymous && !id) {
        return;
      }
      if (in$(id, (p.vote || (p.vote = {}))[d] || [])) {
        p.vote[d].splice(p.vote[d].indexOf(id), 1);
      } else if (in$(id, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = [0, 1, 2]).length; i$ < len$; ++i$) {
          it = ref$[i$];
          results$.push((p.vote || (p.vote = {}))[it] || []);
        }
        return results$;
      }()).reduce(function(){
        return arguments[0].concat(arguments[1]);
      }, []))) {
        return;
      } else {
        ((ref$ = p.vote || (p.vote = {}))[d] || (ref$[d] = [])).push(id);
      }
      return DS[ctrlName].ref.$save();
    },
    admin: function(g, u, lv){
      lv == null && (lv = 1);
      if (in$(u, g.admin)) {
        delete g.admin;
      } else {
        g.admin[u] = lv;
      }
      return $scope.list.$save();
    },
    save: function(k){
      (DS[ctrlName].ref[k] || {}).edit_time = new Date().getTime();
      return DS[ctrlName].ref.$save();
    },
    list: DS[ctrlName].ref,
    links: function(p, cat, type){
      var ret, this$ = this;
      type == null && (type = null);
      ret = (p.link || (p.link = {}))[cat] || [];
      if (type) {
        ret = ret.filter(function(it){
          return it.t === type;
        });
      }
      return ret.map(function(it){
        return this$.get(it.t, it.id);
      });
    },
    cur: DS[ctrlName].factory(),
    picked: function(p, picked){
      var stand, ref$, key$;
      picked == null && (picked = true);
      stand = (ref$ = p.stand || (p.stand = {}))[key$ = (DS.user || {}).id] || (ref$[key$] = []);
      return ((ref$ = p.link || (p.link = {}))['choice'] || (ref$['choice'] = [])).filter(function(it){
        var ref$, ref1$;
        return !(ref$ = !picked) !== !(ref1$ = in$(it.id, stand)) && (ref$ || ref1$);
      }).sort(function(a, b){
        return stand.indexOf(a) - stand.indexOf(b);
      });
    },
    pick: function(p, k){
      var user, ref$, obj, key$;
      user = DS.user || {};
      (ref$ = p.config || (p.config = {})).vote || (ref$.vote = {});
      if (!(p.config.vote.allowAnonymous || user.id)) {
        return;
      }
      obj = (ref$ = p.stand || (p.stand = {}))[key$ = user.id] || (ref$[key$] = []);
      if (in$(k, obj)) {
        obj.splice(obj.indexOf(k), 1);
      } else {
        if (p.config.vote.choice === '1' && obj.length > 0) {
          obj.pop();
        }
        obj.push(k);
      }
      return $scope.list.$save();
    }
  };
};
ctrl.group = function($scope, DataService){
  import$($scope, ctrl.base($scope, DataService, 'group'));
  return $scope.addMember = function(g){
    (g.users || (g.users = {}))[g.newMember] = 1;
    g.newMember = "";
    return $scope.list.$save();
  };
};
ctrl.proposal = function($scope, DataService){
  return import$($scope, ctrl.base($scope, DataService, 'proposal'));
};
ctrl.plan = function($scope, DataService){
  return import$($scope, ctrl.base($scope, DataService, 'plan'));
};
ctrl.comment = function($scope, DataService){
  return import$($scope, ctrl.base($scope, DataService, 'comment'));
};
ctrl.vision = function($scope, DataService){
  return import$($scope, ctrl.base($scope, DataService, 'vision'));
};
ctrl.issue = function($scope, DataService){
  return import$($scope, ctrl.base($scope, DataService, 'issue'));
};
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}