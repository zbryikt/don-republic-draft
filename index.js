// Generated by LiveScript 1.2.0
var ctrl;
angular.module('main', ['firebase']).factory('DataService', function($firebase){
  var ret, base;
  ret = {};
  ret.user = null;
  ret.dbRef = new Firebase('https://don.firebaseio.com');
  ret.firebase = $firebase(ret.dbRef);
  ret.auth = new FirebaseSimpleLogin(ret.dbRef, function(e, u){
    var i$, ref$, len$, f;
    for (i$ = 0, len$ = (ref$ = ret.handle['user.changed']).length; i$ < len$; ++i$) {
      f = ref$[i$];
      f(u);
    }
    ret.user = u;
    return console.log(u);
  });
  ret.handle = {};
  ret.on = function(n, f){
    var ref$;
    return ((ref$ = ret.handle)[n] || (ref$[n] = [])).push(f);
  };
  ret.name = {
    ref: $firebase(new Firebase('https://don.firebaseio.com/name')),
    add: function(n, type, id, field){
      var ref$, ref1$;
      if (((ref$ = (ref1$ = this.ref).n || (ref1$.n = {}))[n] || (ref$[n] = [])).filter(function(it){
        return it.type === type && it.id === id;
      }).length) {
        return;
      }
      ((ref$ = this.ref.n)[n] || (ref$[n] = [])).push({
        type: type,
        id: id,
        field: field
      });
      if (!(type in ((ref$ = this.ref).t || (ref$.t = {})))) {
        this.ref.t[type] = 1;
      }
      return this.ref.$save();
    },
    prune: function(n){
      var ref$;
      this.ref.n[n] = ((ref$ = this.ref.n)[n] || (ref$[n] = [])).map(function(it){
        var e;
        try {
          if (ret[it.type][it.id][it.field] !== n) {
            throw 'changed';
          }
        } catch (e$) {
          e = e$;
          it.id = null;
        }
        return it;
      }).filter(function(it){
        return it && it.id;
      });
      return this.ref.$save();
    }
  };
  base = function(name){
    return {
      ref: $firebase(new Firebase("https://don.firebaseio.com/" + name)),
      create: function(it){
        var n;
        n = this.ref.$add((it.creator = ret.user, it.create_time = new Date().getTime(), it));
        ret.name.add(it.name, name, n.name(), 'name');
        return n;
      },
      factory: function(){
        return {};
      }
    };
  };
  ret.user = base('user');
  ret.group = base('group');
  ret.proposal = base('proposal');
  ret.plan = base('plan');
  ret.comment = base('comment');
  return ret;
});
ctrl = {};
ctrl.main = function($scope, DataService){
  return DataService.on('user.changed', function(u){
    return $scope.$apply(function(){
      return $scope.user = u;
    });
  });
};
ctrl.user = function($scope, DataService){
  import$($scope, ctrl.base($scope, DataService, 'user'));
  $scope.login = function(){
    return DataService.auth.login('facebook');
  };
  $scope.logout = function(){
    return DataService.auth.logout('facebook');
  };
  return DataService.on('user.changed', function(u){
    return $scope.$apply(function(){
      return $scope.cur = u;
    });
  });
};
ctrl.name = function($scope, $timeout, DataService){
  var search;
  $scope.data = DataService.name.ref;
  $scope.handle = null;
  $scope.keyword = "";
  search = function(){
    var k;
    $scope.result = (function(){
      var results$ = [];
      for (k in $scope.data.n) {
        results$.push(k);
      }
      return results$;
    }()).filter(function(it){
      return it.indexOf($scope.keyword) >= 0;
    }).map(function(it){
      DataService.name.prune(it);
      return {
        name: it,
        list: $scope.data.n[it]
      };
    });
    return $scope.handle = null;
  };
  return $scope.$watch("keyword", function(){
    if ($scope.handle) {
      $timeout.cancel($scope.handle);
    }
    return $scope.handle = $timeout(search, 500);
  });
};
ctrl.base = function($scope, DS, ctrlName){
  return {
    create: function(t, k, p){
      var ret;
      ret = DS[ctrlName].create($scope.cur);
      $scope.cur = DS[ctrlName].factory();
      return ret;
    },
    createUnder: function(type, id, ref){
      var item;
      $scope.cur[type] = id;
      item = $scope.create();
      console.log(ref);
      (ref[ctrlName] || (ref[ctrlName] = [])).push(item.name());
      return DS[type].ref.$save();
    },
    'delete': function(it){
      return DS[ctrlName].ref.$remove(it);
    },
    deleteUnder: function(it, ref){
      var obj;
      obj = ref[ctrlName] || (ref[ctrlName] = []);
      if (in$(it, obj)) {
        obj.splice(obj.indexOf(it), 1);
      }
      return $scope['delete'](it);
    },
    get: function(name, id){
      return DS[name].ref[id] || {};
    },
    vote: function(p, d){
      var id, that, it, ref$;
      id = (that = DS.user) ? that.id : 0;
      if (in$(id, (p.vote || (p.vote = {}))[d] || [])) {
        p.vote[d].splice(p.vote[d].indexOf(id), 1);
      } else if (in$(id, (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = [0, 1, 2]).length; i$ < len$; ++i$) {
          it = ref$[i$];
          results$.push((p.vote || (p.vote = {}))[it] || []);
        }
        return results$;
      }()).reduce(function(){
        return arguments[0].concat(arguments[1]);
      }, []))) {
        return;
      } else {
        ((ref$ = p.vote || (p.vote = {}))[d] || (ref$[d] = [])).push(id);
      }
      return DS[ctrlName].ref.$save();
    },
    admin: function(g, u, lv){
      lv == null && (lv = 1);
      if (in$(u, g.admin)) {
        delete g.admin;
      } else {
        g.admin[u] = lv;
      }
      return $scope.list.$save();
    },
    list: DS[ctrlName].ref,
    cur: DS[ctrlName].factory()
  };
};
ctrl.group = function($scope, DataService){
  import$($scope, ctrl.base($scope, DataService, 'group'));
  return $scope.addMember = function(g){
    (g.users || (g.users = {}))[g.newMember] = 1;
    g.newMember = "";
    return $scope.list.$save();
  };
};
ctrl.proposal = function($scope, DataService){
  import$($scope, ctrl.base($scope, DataService, 'proposal'));
  $scope.picked = function(p, picked){
    var user;
    picked == null && (picked = true);
    user = DataService.user || {};
    return p.plan.filter(function(it){
      var ref$, ref1$, ref2$, key$;
      return !(ref$ = !picked) !== !(ref1$ = in$(it, (ref2$ = p.stand || (p.stand = {}))[key$ = user.id] || (ref2$[key$] = []))) && (ref$ || ref1$);
    });
  };
  return $scope.pick = function(p, k){
    var user, obj, ref$, key$;
    user = DataService.user || {};
    if (!user) {
      return;
    }
    obj = (ref$ = p.stand || (p.stand = {}))[key$ = user.id] || (ref$[key$] = []);
    if (in$(k, obj)) {
      obj.splice(obj.indexOf(k), 1);
    } else {
      obj.push(k);
    }
    return $scope.list.$save();
  };
};
ctrl.plan = function($scope, DataService){
  import$($scope, ctrl.base($scope, DataService, 'plan'));
  return $scope.purge = function(it){
    var pk, obj, ref$;
    pk = $scope.get('plan', it).proposal;
    obj = (ref$ = DataService.proposal.ref[pk] || {}).plan || (ref$.plan = []);
    if (in$(it, obj)) {
      obj.splice(obj.indexOf(it), 1);
      DataService.proposal.ref.$save();
    }
    return $scope['delete'](it);
  };
};
ctrl.comment = function($scope, DataService){
  return import$($scope, ctrl.base($scope, DataService, 'comment'));
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}